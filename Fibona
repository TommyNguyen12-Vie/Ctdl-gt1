#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int insertionSortCount = 0;
int quickSortCount = 0;
int heapSortCount = 0;

// Hàm in mảng
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Insertion Sort với việc in các bước thực hiện
void insertionSort(int arr[], int n)
{
    int i, key, j;
    for (i = 1; i < n; i++)
    {
        key = arr[i];
        j = i - 1;

        // Di chuyển các phần tử của arr[0..i-1], mà lớn hơn key, lên một vị trí
        while (j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];  // Di chuyển phần tử lớn hơn
            j = j - 1;
        }
        arr[j + 1] = key;  // Chèn key vào vị trí thích hợp

        // In ra mảng sau mỗi lần chèn
        cout << "Bước " << i << ": ";
        printArray(arr, n);
    }
}

// Hàm phân hoạch (partition) cho QuickSort
int partition(int arr[], int low, int high) {
    int pivot = arr[high];  // Chọn phần tử cuối làm pivot
    int i = (low - 1);  // Chỉ số của phần tử nhỏ hơn pivot
    for (int j = low; j < high; j++) {
        // Nếu phần tử hiện tại nhỏ hơn hoặc bằng pivot, đổi chỗ
        if (arr[j] <= pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

// QuickSort với việc in các bước thực hiện
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        // Phân hoạch lại mảng
        int pi = partition(arr, low, high);

        // In ra bước phân hoạch
        cout << "Pivot: " << arr[pi] << " => ";
        printArray(arr, high - low + 1);

        // Tiếp tục gọi đệ quy cho hai phần mảng
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Hàm heapify cho HeapSort
void heapify(int arr[], int n, int i) {
    int largest = i;  // Khởi tạo largest là root
    int left = 2 * i + 1;  // Trái
    int right = 2 * i + 2;  // Phải

    // Nếu con trái lớn hơn root
    if (left < n && arr[left] > arr[largest]) {
        largest = left;
    }

    // Nếu con phải lớn hơn root
    if (right < n && arr[right] > arr[largest]) {
        largest = right;
    }

    // Nếu largest không phải là root
    if (largest != i) {
        swap(arr[i], arr[largest]);
        cout << "Heap sau khi heapify: ";
        printArray(arr, n);  // In ra mảng sau khi thay đổi

        heapify(arr, n, largest);  // Tiếp tục heapify xuống dưới
    }
}

// HeapSort với việc in các bước thực hiện
void heapSort(int arr[], int n) {
    // Xây dựng heap (xây dựng max heap)
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // Lấy phần tử lớn nhất từ heap và đưa vào cuối mảng
    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        cout << "Sau khi đổi chỗ: ";
        printArray(arr, n);  // In ra mảng sau khi đổi chỗ

        // Gọi heapify để giữ heap
        heapify(arr, i, 0);
    }
}

// Hàm Fibonacci
void fibonacci(int n)
{
    int a = 0, b = 1, c;
    cout << "fib[0] = " << a << " fib[1] = " << b << " ";

    for (int i = 2; i <= n; ++i) {
        c = a + b;
        cout << "fib[" << i << "] = " << c << " ";
        a = b;
        b = c;
    }
    cout << endl;
}

int main() {
    int choice;
    int n;

    cout << "Nhap so phan tu cua mang: ";
    cin >> n;

    int arr[100];
    srand(time(0));
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 100 + 1;
    }

    cout << "Mang ngau nhien: ";
    printArray(arr, n);

    do {
        cout << "=======Menu=======" << endl
            << "1. Insertion Sort" << endl
            << "2. QuickSort" << endl
            << "3. HeapSort" << endl
            << "4. Fibonacci" << endl
            << "0. Thoat chuong trinh" << endl;
        cout << "Nhap lua chon: ";
        cin >> choice;

        switch (choice) {
        case 1: {
            int arrCopy1[100];
            for (int i = 0; i < n; i++) {
                arrCopy1[i] = arr[i];
            }
            cout << "\n==== Insertion Sort ====\n";
            insertionSort(arrCopy1, n);
            break;
        }

        case 2: {
            int arrCopy2[100];
            for (int i = 0; i < n; i++) {
                arrCopy2[i] = arr[i];
            }
            cout << "\n==== QuickSort ====\n";
            quickSort(arrCopy2, 0, n - 1);
            break;
        }
        case 3: {
            int arrCopy3[100];
            for (int i = 0; i < n; i++) {
                arrCopy3[i] = arr[i];
            }
            cout << "\n==== HeapSort ====\n";
            heapSort(arrCopy3, n);
            break;
        }
        case 4: {
            int fibLimit;
            cout << "Nhap gioi han Fibonacci: ";
            cin >> fibLimit;
            fibonacci(fibLimit);
            break;
        }
        case 0:
            cout << "Cam on ban da su dung chuong trinh" << endl;
            break;
        default:
            cout << "Lua chon khong hop le. Vui long chon lai." << endl;
            break;
        }
    } while (choice != 0);

    return 0;
}
